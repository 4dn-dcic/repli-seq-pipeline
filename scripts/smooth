#!/usr/bin/env Rscript

require(parallel,quietly=T)

removeext <- function( filenames ){
	filenames<-as.character(filenames)
	for(i in 1:length(filenames)){
		namevector<-unlist(strsplit(filenames[i],"\\."))
		filenames[i]<-paste(namevector[1:(length(namevector)-1)],collapse=".")
	}
	filenames
}

usage <- function(){cat("\n  Usage: smooth windowSize threads bgFile1 bgFile2 bgFileN\n")}
args = commandArgs(trailingOnly=TRUE)
if(length(args)<3){usage();stop("see usage")}
lspan <- as.numeric(args[1])
threads <- as.numeric(args[2])
bgfiles <- args[3:length(args)]

	options(scipen=9999)
	
  if(lspan<1){
		stop("lspan must indicate distance in bp")
	}
	
	bgnames <- basename(removeext(bgfiles))
	numbgs <- length(bgfiles)
	outnames <- paste(bgnames,"_loess",lspan,".bg",sep="")
	
	dump <- mclapply(seq_len(numbgs), function(x){
		curbg <- as.data.frame( read.table ( bgfiles[x], header=FALSE, stringsAsFactors=FALSE ) )
		chroms    <- unique(curbg[,1])
		numchroms <- length(chroms)
		all=split(curbg,curbg[,1])
		
		lscores<-lapply(1:numchroms,function(i){
			
			cur <- all[[i]]
		  curchrom <- cur[1,1]
			chromlspan <- lspan/(max(cur[,3])-min(cur[,2]))
			
			cura <- as.data.frame(lapply(4:ncol(cur), function(k){
				cur[,k] <- tryCatch({
						predict(loess(cur[,k]~cur[,2],span=chromlspan),cur[,2])
					},warning = function(war){
						warning(paste(bgnames[x],"chromosome",cur[1,1],":",war))
						out <- predict(loess(cur[,k]~cur[,2],span=chromlspan),cur[,2])
						return(out)
					},error = function(err){
						warning(paste("smoothing failed for file",bgnames[x],"chromosome",cur[1,1],":",err))
						return(cur[,k])
					}
				)
			}))
			
			cura <- cbind(cur[,1:3],cura)
			colnames(cura) <- colnames(cur)
			return(cura)
		})
		smoothbg<-do.call(rbind,lscores)
		write.table(smoothbg,file=outnames[x],col.names=FALSE,quote=FALSE, sep="\t", row.names=FALSE)
		rm(curbg)
		gc()
	}, mc.cores=threads, mc.preschedule=FALSE)

	return(outnames)
}
