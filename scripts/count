#!/usr/bin/env bash

usage() {
  echo "Usage: $(basename $0) [-t threads ] -w windows.bed bed1 [bed2 ... bedN ]" 1>&2
  echo "" 1>&2
  exit 1
}

while getopts ":t:w:" opt; do
  case $opt in
  t)
    NTHREADS=$OPTARG
   ;;
  w)
    WINDOWBED=$OPTARG
   ;;
  \?)
   echo "Invalid option: -$OPTARG" >&2
   usage
   ;;
  [?])
   usage
   ;;
  :)
   echo "Option -$OPTARG requires an argument." >&2
   echo "" >&2
   usage
   ;;
  esac
done

if [ -z $NTHREADS ]; then
  NTHREADS=1
fi

shift $((OPTIND-1))

if [[ $# -eq 0 ]] ; then
  echo 'no files given'
  exit 1
fi

if [[ -z $WINDOWBED ]] ; then
  echo 'window bed not provided'
  exit 1
fi

INPUT=$@

dedup(){
  INPUT=$1
  WINDOWBED=$2
  
  # check if file exists
  if [[ ! -f $f ]]; then echo "file \"$f\" not found"; exit 1; fi
  if [[ ! -f $WINDOWBED ]]; then echo "file \"$WINDOWBED\" not found"; exit 1; fi
  
  # check input is a bed
  if [[ $f != *.bed ]]; then echo "input is not a bed file"; exit 1; fi
  if [[ $WINDOWBED != *.bed ]]; then echo "window file is not a bed file"; exit 1; fi
  
  BASE="$(basename $f | sed 's/\.bed$//g')"
  WBASE="$(basename $WINDOWBED | sed 's/\.bed//g')"
  OUTPUT=${BASE}_w${WBASE}.bg
  
  bedtools intersect -sorted -c -b $INPUT -a $WINDOWBED | awk '{print $1,$2,$3,$4 }' OFS='\t' > $OUTPUT
  
  echo $OUTPUT
}

export -f dedup

parallel --will-cite -k -j $NTHREADS "count {} $WINDOWBED" ::: $INPUT

